# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest


variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform-azure-devops/terraform-manifests'
              artifact: 'terraform-manifests-out'
              publishLocation: 'pipeline'         
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: Terraform Install
            inputs:
              terraformVersion: '1.0.7'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure-devops/terraform-manifests'
              backendType: 'azurerm'
              backendServiceArm: 'AzureDevOpsSpn'
              backendAzureRmResourceGroupName: 'terraform-rg'
              backendAzureRmStorageAccountName: 'azpractisetfstorage1303'
              backendAzureRmContainerName: 'aks-tf-devops'
              backendAzureRmKey: 'aks-base.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure-devops/terraform-manifests'
              allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev & QA
# Deployment-2: Deploy QA AKS Cluster
## Step-1: Download Secure File
## Step-2: Terraform Initialize (State Storage to store in Azure Storage Account)
## Step-3: Terraform Plan 
## Step-4: Terraform Apply

  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:                
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                  secureFile: 'aksdevsshkey.pub'
              - task: TerraformCLI@0
                inputs:
                  command: 'init'
                  backendType: 'azurerm'
                  backendServiceArm: 'AzureDevOpsSpn'
                  backendAzureRmResourceGroupName: 'terraform-rg'
                  backendAzureRmStorageAccountName: 'azpractisetfstorage1303'
                  backendAzureRmContainerName: 'aks-tf-devops'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'AzureDevOpsSpn'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terraform Apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'AzureDevOpsSpn'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false